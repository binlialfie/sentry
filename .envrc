# This is the .envrc for Sentry, for use with direnv.
# We use it for:
#   - lightweight (crucial since it's run on every cd to here) state checking and assurance (e.g. activating the venv)
#   - one-time heavyweight state initialization (such as creating a .venv)
#       - TODO: heavyweight state assurance, such as syncing venv, should happen in a one-off "fixall" script
#               and should be recommended by direnv as a catch-all fixer
#       - Although, this kind of state initialization could be moved to there from here in the future.
#   - setting useful environment variables

export PYTHONDONTWRITEBYTECODE=1
export PIP_DISABLE_PIP_VERSION_CHECK=on
export NODE_OPTIONS=--max-old-space-size=4096

bold="$(tput bold)"
red="$(tput setaf 1)"
reset="$(tput sgr0)"

trap notice EXIT

notice () {
    [ $? -eq 0 ] && return
    cat <<EOF
${bold}direnv tooling is in an ALPHA state!
If you're having trouble, or have questions, please ask in #discuss-dev-tooling
and/or reach out to @josh.
${reset}
EOF
}

require () {
    command -v "$1" 2>&1 > /dev/null
}

info () {
    cat <<EOF
${bold}direnv: ${1}
${reset}
EOF
}

die () {
    >&2 cat <<EOF
${red}${bold}direnv FATAL: ${1}
${reset}
EOF
    exit 1
}

init_venv () {
    deactivate 2>/dev/null || true
    python2.7 -c "import sys; sys.exit(sys.version_info[:2] != (2, 7))" || \
        die "You'll need to install python2.7. It's recommended to use pyenv."
    python2.7 -m virtualenv .venv
}

set -e

### System ###

for pkg in \
    make            \
    docker          \
    chromedriver    \
    pkg-config      \
    openssl         ;
    do
    if ! require "$pkg"; then
        die "You seem to be missing the system dependency: ${pkg}
Please install homebrew, and run brew bundle."
    fi
done

### Python ###

# direnv set -u's; unsure if it's a good idea to set +u.
VIRTUAL_ENV="${VIRTUAL_ENV-}"

if [ -n "$VIRTUAL_ENV" ]; then
    # we're enforcing that virtualenv be in .venv, since future tooling e.g. venv-update will rely on this.
    if [ "$VIRTUAL_ENV" != "${PWD}/.venv" ]; then
        info "You're in a virtualenv, but it's not in the expected location (${PWD}/.venv)"
        init_venv
    fi
else
    if [ ! -f ".venv/bin/activate" ]; then
        info "You don't seem to have a virtualenv."
        init_venv
    fi
fi

info "Activating virtualenv."
source .venv/bin/activate

python -c "import sys; sys.exit(sys.version_info[:2] != (2, 7))" || \
    die "For some reason, the virtualenv isn't Python 2.7."

# naive check, but we need to stay fast
if [ "$(command -v sentry)" != "${PWD}/.venv/bin/sentry" ]; then
    info "Your .venv is activated, but sentry doesn't seem to be installed. Let's install it."
    make ensure-pinned-pip
    # TODO: use venv-update to create venv. this assumes virtualenv is installed
    # which is reasonable if python2.7 is via pyenv. I forget if brew python@2 contains it.
    SENTRY_LIGHT_BUILD=1 make install-sentry-dev
fi

### pre-commit ###

# this is cheap, so we'll just do it every time
ln -sf config/hooks/* .git/hooks

if ! require pre-commit; then
    info "Looks like you don't have pre-commit installed. Let's install it."
    make setup-git
fi

# this hotfix is cheap too, so just run it every time
rm -f .git/hooks/pre-commit.legacy

### devservices/database ###

SENTRY_DIRENV_NO_CHECK_DEVSERVICES="${SENTRY_DIRENV_NO_CHECK_DEVSERVICES-}"
if [ -z "${SENTRY_DIRENV_NO_CHECK_DEVSERVICES}" ]; then
    info "Checking for devservices containers, this might be a bit slow.
To disable in the future, please set SENTRY_DIRENV_NO_CHECK_DEVSERVICES=1"

    # XXX: these container names are hardcoded for now
    # NOTE: sentry_symbolicator isn't started up by devservices, and is behind a config flag, so we're not checking for it
    for container in \
        sentry_postgres     \
        sentry_clickhouse   \
        sentry_snuba        \
        sentry_redis        ;
        do
        docker exec "$container" true || die "The docker container ${container} doesn't seem to be running.
    Please run sentry devservices up."
    done
fi

# TODO: is there a faster way to state-check the need for sentry reset-db and sentry createuser?
# This is a little slower than i'd like, so not turning it on for now, not even behind a NO_CHECK flag.
# docker exec sentry_postgres sh -c "psql -U postgres -h 127.0.0.1 sentry --command 'select * from sentry_useremail'"

### Node ###

# naive check, but we need to stay fast
if [ ! -x "node_modules/.bin/webpack" ]; then
    info "You don't seem to have yarn packages installed. Let's install them."
    make install-yarn-pkgs
fi

PATH_add node_modules/.bin
